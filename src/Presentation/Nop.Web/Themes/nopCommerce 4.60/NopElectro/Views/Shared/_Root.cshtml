@{
    Layout = "_Root.Head";
}
@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.BodyStartHtmlTagAfter })
@{ await Html.RenderPartialAsync("_Notifications"); }
@{ await Html.RenderPartialAsync("_JavaScriptDisabledWarning"); }
@{ await Html.RenderPartialAsync("_OldInternetExplorerWarning"); }

@{
    var isOnePageCheckout = @Context.Request.Path == "/onepagecheckout" ? true : false;
}
<div class="master-wrapper-page" id="@(isOnePageCheckout ? "secure-page" : "")">
    
    <div class="master-wrapper-page-inner">
        @await Component.InvokeAsync(typeof(AdminHeaderLinksViewComponent))
        @{ await Html.RenderPartialAsync("_Header"); }
        <script asp-location="Footer">
             var localized_data = {
            AjaxCartFailure: "@T("AjaxCart.Failure")"
        };
        AjaxCart.init(false, '.header-links .cart-qty', '.header-links .wishlist-qty', '#flyout-cart', localized_data);

            $(document).ready(function () {
                //Product Box Title
                var productTitle = $('.product-grid .item-box .product-title');

                productTitle.each(function () {
                    $(this).dotdotdot({
                        watch: true
                    });
                });
            });
        </script>
        <div class="header-menu">
            @await Component.InvokeAsync(typeof(TopMenuViewComponent))
        </div>
        <div class="master-wrapper-content">
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ContentBefore })

            @if (IsSectionDefined("Breadcrumb"))
            {
                @RenderSection("Breadcrumb")
            }
            <div class="master-column-wrapper">
                @RenderBody()
            </div>
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ContentAfter })
        </div>
        @await Component.InvokeAsync(typeof(FooterViewComponent))
    </div>
</div>

@await Component.InvokeAsync(typeof(EuCookieLawViewComponent))
@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })
